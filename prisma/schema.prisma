
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}
model Movie {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  likedCount  Int     
  liked       Boolean
  title       String  
  description String
  category    String   
  viewed      Boolean
  viewcount   Int      @default(0)
  image       String
  url         String
  ReleaseYear DateTime @map(name: "release_year")
  cast        String
  special     Boolean
  specialtype String
  movielength String
  hasserie    Serie[]
  isaserie    Boolean  @default(false)
}

model Serie {
  episodeid     Int      @id @default(autoincrement())
  season        Int      @map("seasonId")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  parentId      Int      @map("parentmovieId")
  episodeTitle  String   
  likedCount    Int      
  liked         Boolean
  synopsis      String
  category      String   
  viewed        Boolean
  viewcount     Int      @default(0)
  image         String
  url           String
  ReleaseYear   DateTime @map(name: "release_year")
  cast          String
  special       Boolean
  specialtype   String
  episodelength String
  parent        Movie?   @relation(fields: [parentId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  email     String   @unique
  password  String
}

// model Account {
//   id Int @default(autoincrement()) @id 
//   userId  Int  @map("user_id")
//   type  String
//   provider  String
//   providerAccountId String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user User@relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id Int @default(autoincrement()) @id 
//   sessionToken String   @unique @map("session_token")
//   userId       Int   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
